datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String  @id @unique @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image Image?
  notes Note[]
}

model Image {
  id String @unique @default(cuid())

  contentType String
  altText     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note?   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String?

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String? @unique

  file File?
}

model File {
  id   String @id @unique @default(cuid())
  blob Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId   String   @unique
}

model Note {
  id        String   @id @unique @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images Image[]

  // our user search orders by recently owners who have recently updated notes
  // so indexing on the owner ID helps with that (a LOT).
  @@index([ownerId, updatedAt(sort: Desc)])
}
